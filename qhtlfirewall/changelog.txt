QhtLink Firewall (qhtlfirewall) Changelog

Date: 2025-10-04
Version: 0.1.42 “Inline Shape”

Fixes / UI Hardening
- Resolved visual deformation of some inline drops (Profiles, Redirect) caused by flex centering persisting after load; flex now restricted to the loading state only.
- Added width normalization (panels/forms expand to 100%) and MutationObserver to reassert layout after dynamic insertion.
- Loader pseudo-element now has pointer-events:none to avoid intercepting clicks once content paints beneath it.
- Ensured monospace <pre> content respects container width with max-width:100% to prevent horizontal overflow mis-measuring.

Notes
- No functional server action changes; focuses purely on layout stability following 0.1.41 centering changes.

Packaging
- Version bump to 0.1.42 for distribution.


Date: 2025-10-04
Version: 0.1.41 “Centered Blade”

UI
- Recentered inline spacer loader using flex + ::before pseudo element so sword sits vertically centered (previous fixed Y offset appeared too low compared to other tabs).
- Converted responsive sizing rules to target ::before ensuring clean scaling at breakpoints.
- Added halo hardening for Advanced tab hex buttons (isolation + blend-mode) to ensure glow remains visible even after subsequent dynamic style injections.

Packaging
- Version already set to 0.1.41; artifact rebuild pending.

Date: 2025-10-04
Version: 0.1.41 “Inline Extend”

Fixes
- Added `conf_inline` and `deny` to the inline action regex so the Config preview and Deny editor no longer trigger a full page reload.
- Wrapped `deny` action body with `qhtl-inline-fragment` when ajax=1 (parity with allow/redirect/etc.).
- Status inline endpoint now clarifies when the LOCALINPUT chain is empty or inaccessible.

Result
- Config button should no longer reload the entire firewall page; should render the truncated inline panel instead.
- Rules button continues using dedicated `status` action; enhanced empty output message helps diagnose permission or chain issues.

Date: 2025-10-04
Version: 0.1.40 “Morph Press”

Functional
- Added new `conf_inline` action that serves a truncated, read-only configuration preview wrapped in `qhtl-inline-fragment` for the Config plus button (solves blank Config output).
- Updated Config button mapping to call `conf_inline` (ajax=1) instead of full `conf` page.
- Added persistent Deny count display below the Allow button (mirrors existing Allow count style).
- Implemented long‑press morph on Allow button: after 2s the button visually transforms (orange gradient + label switch to Deny); after 3s it auto-triggers the `deny` action. Releasing early cancels without action.

UI
- Added morph CSS state (`fw-allow-morph`) with orange gradient and glow.
- Confirmed Advanced tab halo styling active (prior missing halo issue addressed by restoring :before + :after layers earlier; documented now).

Reliability
- Inline Config preview capped at first 450 lines to prevent performance / overflow while still giving quick access.

Packaging
- Version bump to distribute new inline config and morph interaction.

Date: 2025-10-04
Version: 0.1.39 “Inline Status”

Functional
- Added dedicated lightweight 'status' action producing a compact inline fragment (status callout + first 80 lines of LOCALINPUT chain) when ajax=1. This directly feeds the Rules plus button (fwb5) rather than relying on parsing a large page.

UI
- Restored spacer min-height to 220px baseline (was briefly elevated) to maintain vertical consistency with other cells while still accommodating enlarged loader sizing through background scaling.

Reliability
- Inline status no longer depends on full page parse; resolves blank Rules panel scenario if prior multipart form parsing or fragment extraction failed.

Packaging
- Version alignment: 0.1.39 already set in version.txt; entry documents the change set.

Date: 2025-10-04
Version: 0.1.39 “Golden Halo”

Advanced Tab
- Strengthened hex button halo (larger radial gradient, deeper glow stack, animated pulse lengthened) and ensured pseudo-elements sit behind buttons (z-index adjustments) so glow is visible.
- Increased hover and active box-shadow intensity for clearer feedback.

Packaging
- Version bump to deliver Advanced tab halo polish.

Date: 2025-10-04
Version: 0.1.38 “Long Blade”

UI
- Enlarged inline spacer loader (idle_fallback.gif) to visually match sword size used on other tabs; increased min-height to 260px for consistent vertical balance.
- Added responsive breakpoints (1100px, 880px, 680px) to scale loader down on narrower viewports.
- Added subtle fade-in animation when loader first appears.

Packaging
- Version bump to ship visual consistency improvement.

Date: 2025-10-04
Version: 0.1.37 “Encoded Action”

Critical Fix
- Switched AJAX submission from multipart FormData to classic application/x-www-form-urlencoded. Server parsing logic (using CGI/ENV FORM) was ignoring multipart body for inline plus-button actions, returning the full WHM shell instead of inline fragments (explaining blank spacer).
- Added explicit detection log: warns when a full page shell arrives without fragment wrapper.
- Retained all previous fallback layers; with correct parameter parsing they should no longer trigger for Config/Rules in normal cases.

Packaging
- Version bump to propagate protocol change immediately.

Date: 2025-10-04
Version: 0.1.36 “Black Box”

Diagnostics / Fallback
- Added a final-stage raw HTML dump fallback (first 20KB escaped) when Config or Rules inline loads still fail all fragment extraction tiers. Displays inside a scrollable panel so user never sees a silent blank area.
- Console now emits an explicit [QHTL fallback] Raw dump message when this path is taken, including full response length.
- Intention: surface evidence of why ajax=1 fragment markers aren’t present (missing wrapper, rewrite, server-side filtering) to guide next server fix.

Packaging
- Version bump to deploy diagnostic raw-dump safety net.

Date: 2025-10-04
Version: 0.1.35 “Fragment Net”

Inline Extraction Hardening
- Added regex-based fragment extraction fallback when DOM parsing fails but the raw response still contains a qhtl-inline-fragment wrapper.
- Added body-level salvage: if full HTML document is returned without an extracted fragment, inject entire <body> contents so users see something instead of a blank spacer.
- Diagnostic console.debug messages identify which fallback path succeeded (Regex vs Body).

Packaging
- Version bump to propagate hardened extraction to environments still receiving full-page shells for Config/Rules.

Date: 2025-10-04
Version: 0.1.34 “Retry Patch”

Hotfix
- Refactored the 0.1.33 secondary non-AJAX retry block to a clearer named IIFE to resolve a browser-side SyntaxError ( stray parenthesis in minified-style inline block ). No functional change intended beyond eliminating the parse error.
- Version bump to ensure environments pull corrected script.

Date: 2025-10-04
Version: 0.1.33 “Second Wind”

Reliability / Inline Spacer
- Added a second-layer non-AJAX retry for Config and Rules (Status) buttons. If the initial ajax=1 fragment comes back empty or only placeholder text, the UI now silently re-submits the same action WITHOUT the ajax flag and attempts a fresh fragment extraction from the full page markup.
- Improved fragment replacement logic: only replaces placeholder if the retry yields substantive content (>20 chars and not a placeholder token) to avoid flicker.

Enable Flow Hardening
- After requesting Enable inline, if no meaningful Status output arrives within ~4s (still shows only the enable notice or placeholder text), the UI now forces a full page reload to guarantee updated status state.
- Console warning logs the forced reload for diagnostics (visible in browser dev tools).

Diagnostics
- Retains prior 0.1.32 raw-response console.debug logging for now so we can verify whether retry produces richer fragments; will prune in a later stabilization build once confirmed.

User Impact
- Should resolve persistent blank Config / Rules outputs and unreliable start-from-Off behavior by guaranteeing either a retry-derived fragment or a full refreshed state.

Packaging
- Version bump to 0.1.33 to propagate retry + enable fallback changes.

Date: 2025-10-04
Version: 0.1.23 “Idle Blade”

Firewall Tab
- Spacer now uses idle_fallback.gif (sword animation) as its default background until first AJAX result replaces it; background removed on content fill.
- Plus button inline loads (conf/allow/profiles/status/redirect) append ajax=1 so only inner editor/content fragment renders (editfile now outputs a compact fragment when ajax=1).

Developer
- Added qhtl-inline-fragment wrapper markers for future JS filtering or styling of inline-only responses.

Packaging
- Pending rebuild to ship idle_fallback.gif integration + trimmed editfile AJAX output.

Date: 2025-10-04
Version: 0.1.22 “Spacer GIF”

Firewall Tab
- Spacer now shows actual loader GIF centered immediately (not stripe animation) until first inline result arrives, then GIF removed.
- Plus button actions no longer dump full page markup; conf action now renders minimal content when ajax=1 (suppresses outer scripts/pagination shell on inline loads).

Packaging
- Pending rebuild for GIF loader + minimal AJAX conf.

Date: 2025-10-04
Version: 0.1.21 “Spacer Live”

Firewall Tab
- Plus button actions (Config, Profiles, Allow, Rules(Status), Redirect) now load inline via AJAX into the spacer row with animated loader and auto-fade.
- Fallback (other actions) still use main inline output or full submit where appropriate (enable/disable/restart/flush mechanics unchanged).

Packaging
- Pending rebuild for AJAX spacer behavior.

Date: 2025-10-04
Version: 0.1.20 “Spacer”

Firewall Tab
- Inserted an inline spacer row (180px min-height) between the plus button cluster and the Deny IPs row.
- Spacer now acts as an AJAX target for plus button actions (conf/profiles/allow/status/redirect): shows animated loader background, then fades out ~4s after content loads.

Packaging
- Pending rebuild to ship spacer addition.

Date: 2025-10-04
Version: 0.1.19 “Flat Cell”

UI / Inline Panel
- Removed the remaining wrapper layer: the table cell (TD) now directly serves as the inline output container (id=fw-inline-output).
- Updated CSS/JS selectors accordingly (no behavioral change) for slightly lower DOM depth and cheaper style recalcs.

Packaging
- Pending rebuild to propagate flattened structure.

Enhancement
- Added visual spacer/inline row (empty 180px cell) between Firewall plus buttons and Deny IPs row, mirroring Options tab layout for alignment and future context output.

Date: 2025-10-04
Version: 0.1.18 “Clean Cell”

UI / Inline Panel
- Removed nested placeholder <div> from inline action output cell; now a truly empty container ready for fresh action content.
- Increased minimum height from 220px to 280px to provide more breathing room for multi-line command results without immediate scroll.
- Stripped JS references to the removed placeholder element to avoid redundant DOM lookups.
- Follow-up: fully flattened structure by turning the TD itself into the output container (removed wrapper <div>) to eliminate one more layer and simplify future styling hooks.

Packaging
- Pending rebuild to propagate structural cleanup (will create -0.1.18 artifact after version bump).

Date: 2025-10-04
Version: 0.1.17 “Opt Reset”

UI
- Fixed invalid CSS selector (:contains) in Options tab double-click reset logic; replaced with robust textContent scan to eliminate DOMException noise.
- Ensures inline output reset still works after simplifying the panel structure.

Packaging
- Version bump to propagate selector fix via tarball so installer sees update immediately.

Date: 2025-10-04
Version: 0.1.16 “Single Cell”

UI / Inline Actions
- Simplified the inline output panel: removed nested inner wrapper & separate loader element; loader now appears as a background image on the single gradient cell.
- Reduced DOM depth (−1 div) and JS logic (removed inner query path) for faster repaint and clearer future styling tweaks.
- Brightness dim on load replaces prior blur for sharper perceived responsiveness.

Packaging
- Immediate version bump to force cache-bust so environments pick up the structural simplification without waiting for manual purge.

Date: 2025-10-04
Version: 0.1.15 “Twin Panel”

UI / Inline Actions
- Restyled the unified inline output panel to visually match the Options tab nested gradient style (outer surface + recessed inner gradient) for consistency.
- Added centered loader overlay while an action is in-flight; previous text-based “Loading +act…” placeholder replaced with spinner layer.
- Introduced subtle blur + opacity dim on stale content until new action output arrives; prevents flash/flicker on rapid successive submits.
- Structural change: inner container now retains height during loads to avoid layout shift, eliminating scroll jumps.

Code Quality
- Migrated the inline panel emission to a single heredoc with column-1 terminator to prevent future heredoc parsing edge cases.
- No behavioral changes to plus-button remaps (redirect on fwb7, hold-to-flush on fwb8), only presentation & load-state signaling.

Packaging
- Version bump solely to ensure updaters invalidate cached 0.1.14 tarballs when fetching the refined UI.

Date: 2025-10-04
Version: 0.1.14 “Inline Anchor”

Stability
- Fixed a heredoc emission block for the unified inline output panel that some target environments parsed incorrectly, triggering Perl errors around "comparison chaining" and bogus regexp modifiers. Refactored to an isolated interpolated variable + controlled heredoc.
- Added clearer isolation of the loader image URL to prevent accidental interpolation drift.

Packaging / Install
- Version bump to ensure cache-busting and to distinguish fixed builds from 0.1.13 artifacts that may still include the problematic heredoc formatting.


Date: 2025-10-02
Version: 0.1.11 “Curse Blade”

Upgrade UI/Flow
- “Check Manually” now morphs into a prominent orange “Upgrade” triangle when a newer version is available. The text and the short countdown render inside the triangle for clarity.
- Inline ChangeLog viewer added next to the manual check for quick review before upgrading.
- Post-upgrade behavior simplified: the UI now auto-refreshes every 10s (up to 60s) and stops when the Upgrade button disappears. This replaces the previous progress polling loop.
- Reduced the Upgrade tab’s height by removing the bottom info row while preserving all triangle buttons.

Version Check & Mirrors
- Robust manual version check endpoint: normalizes configured mirrors, tolerates minor formatting drifts in version.txt, and gives clearer error details.
- Explicit error handling when no HTTP client is available; resilient parsing with UTF-8 BOM stripping and multi-line token scanning.

Watcher UX
- Newest-first log display for AJAX tail output, with non-live auto-scroll targeting the newest entries (scroll to top).
- Modal pinned near the top of the viewport (20px) and constrained to keep 20px margins on both the left and right sides for better readability.

Stability & Optional Modules
- UI no longer errors if ServerCheck, RBLCheck, or Ports modules are missing. Optional requires and guarded calls prevent undefined subroutine/method crashes and surface a compact notice instead.

General
- Layout fix: all triangle buttons render normally; only the first morphs to the Upgrade state when applicable.
- Light CSS/JS polish around the triangle components and modal sizing.

Quick Actions & Inline Results
- Introduced a compact Quick Actions toolbar with six violet, five-point stars (non-scaling 10px halo) labeled Allow, Deny, Ignore, Search, Unblock, Temp.
- Stars 1–5 submit via a cancelable AJAX pathway and render results inline in a dedicated content area (no full-page navigation).
- Long-press behavior (3s) on Allow/Deny/Ignore shows an on-star countdown and opens Quick View popups. A capture-phase guard prevents background-tab misfires.
- Removed legacy quick rows and ensured all hidden forms (qallow, qdeny, qignore, grep, qkill) are intercepted for inline delivery.

Temporary Rule Modal
- Added a new Temporary Allow/Deny modal with a subtle, pulsating yellow glow; it scrolls with the firewall container and preserves 20px gutters.
- Close behavior hardened: clicking outside the dialog now closes the modal across mousedown/touchstart/pointerdown events; explicit Close button retained.
- Constrained inputs to ≤150px; kept concise helper text for ports and durations. Modal works with or without jQuery and degrades gracefully.

Security & Robustness Hardening
- Replaced instances of $.ajax with jQuery.ajax to eliminate dependency on the global "$" alias and improve supply-chain resilience of the JS runtime.
- Implemented a vanilla XMLHttpRequest fallback for all critical flows (form submits and modal apply) for defense-in-depth.
- Converted risky inline JS to single-quoted heredocs to prevent accidental Perl interpolation of "$" identifiers and ensure literal emission of JavaScript.
- Normalized CSS decimal literals and sanitized stray comment tokens embedded in Perl strings to avoid parse drift across browsers.
- Added capture-phase event interceptors for consistent behavior under nested handlers; guarded DOM appends and modal class toggles for idempotency.

UI Polish
- Removed the legacy inline Temporary Rule row/button now that the modal supersedes it.
- Tuned Options tab orange buttons: label font-size increased, then balanced to 15px, and reduced vertical line-height to tighten the gap between stacked words for greater legibility within 70×70 squares.
- Preserved the 10px bright-orange halo and hover micro-interactions; ensured accessible focus outlines remain present.

Date: 2025-09-30
Version: 0.1.10 “Sharp Scratch”

Waterfall UI/UX
- Replaced Waterfall “Status” with a dedicated “On” bubble and removed the old Status button.
- All bubble actions now load inline below the bubbles via AJAX only; page scaffolding is not re-rendered.
- Watcher modal fixed: JSON.parse issues resolved, now modal-only with outside-click close, and no scroll locking.
- Quick Actions/gear popup stabilized, closes on outside click, avoids header overlay issues.
- Kept Bootstrap JS, removed Bootstrap CSS to prevent WHM header shrinking.
- Added blue “water bubble” hover sheen and ring pulse on success.

Security & Robustness
- Safe JS delivery: added wstatus_js and banner_js endpoints with correct MIME and X-Content-Type-Options: nosniff; guarded script-like requests with a JS no-op.
- Early absolute QHTL_SCRIPT initializer fixed; added cache-busting via version token on script includes.
- Hardened status_json to tolerate transient service states and systemd presence or PID checks.

“On” Bubble Behavior
- Running state: short click does nothing; press-and-hold refined into a two-phase flow:
	1) 3s WARNING countdown (release during this phase triggers Restart immediately)
	2) then 3s dim countdown (auto-Restart at end)
- Stopped/Disabled state: tap-to-start works immediately.
- Cancel freeze during WARNING fixed; timers/classes cleaned safely.

APIs
- Implemented lightweight APIs: api_startwf, api_restartwf, api_stopwf, and retained api_disablewf for potential future use.

Post-save Auto-Restart
- After saving any of the seven Waterfall edit panels, the UI now auto-triggers the On bubble restart countdown (no manual Restart button). A brief “Restarting qhtlwaterfall…” message is shown.
- Added WStatus.restartCountdown() for programmatic restarts; resilient if widget isn’t mounted (mounts and triggers).

Seasonal Decorations
- Added a lightweight seasonal loader (Oct 1–31) that decorates the On bubble with a small pumpkin, a subtle bat animation, and a gentle glow. Assets live under ui/images/holiday/ and can be replaced.
- Added holiday_asset endpoint to serve holiday CSS/SVG with nosniff and sanitization.

General
- Reduced console noise and added singleton guards to avoid duplicate wiring.
- Back-compat maintained for qhtlwaterfallrestart.

Date: 2025-09-29
Version: 0.1.9 “Snow Castle”

TUI (Terminal UI)
- New dialog-based TUI available post-install (qhtlfirewall-tui).
- Config editor by section with safe backups and inline key editing.
- Lists editor for allow/deny/ignore/pignore/rignore/fignore/etc.
- Quick Allow/Deny, Temporary rules, Open Ports, Update helpers.
- Logs viewer now sources log paths from /etc/qhtlfirewall/qhtlfirewall.logfiles with live tail view and friendly empty/unreadable handling.
- Visual polish: global backtitle, animated splash, spinner while executing commands, and subtle transitions.
- Dedicated File Explorer menu launching Midnight Commander (mc) if available.

Installers
- Deploy the TUI and attempt to install dialog when available.
- Post-install message informs how to launch the TUI.

Misc
- Safer awk-based config updates replacing fragile sed expressions.
- Various bug fixes and portability improvements.

Date: 2025-09-25
Version: 0.1.8 “Frozen Meteor”

Install/Upgrade
- TGZ-first workflow hardened: robust archive layout detection, automatic installer selection (generic, cPanel, etc.), and idempotent reruns.
- Reinstall/upgrade one-liners added (with a debug variant that logs steps and output for support).

Web UI
- Internal wiring refactors to support future backgrounded operations triggered from the UI.

Packaging
- Normalized tarball layout; ensured top-level qhtlfirewall/ directory with installers.
- Included version.txt and updated changelog in artifacts; corrected file modes and permissions.

General
- Assorted stability fixes and minor performance improvements.

Date: 2025-09-23
Version: 0.1.7 “Ruby Lane”

cPanel/WHM UI — Watcher Modal
- Readability: Render each log line as a separate, single-line row with ellipsis truncation and a tooltip for the full content.
- Scrolling: Automatically scroll to the newest lines; in real-time mode, stick to bottom only if the user is already near it (respects manual scroll-up).
- Real-time tail: Added “Real Time” mode (1s) that appends only new lines (no flicker) while keeping “Autocheck” mode (5s). Suppressed temporary “Loading…” text during live updates.
- Safety: Strip any embedded <script> in responses and treat payload as plain text. Avoid fragile heredoc patterns by using safe newline handling (String.fromCharCode(10)).
- Controls & layout: Reworked footer layout into inputs + right-side button group, with a dedicated header bar. Moved the “Refresh in” counter to the header, right of “Watcher”. Reduced inter-button gap by an additional 10%.
- Buttons: Keep Autocheck (green) and Pause (orange) at normal intensity; highlight Real Time ~20% stronger while in live mode, and highlight Start ~20% stronger when paused.

Notes
- UI/UX improvements only; no backend API changes were required.

Date: 2025-09-22
Version: 0.1.6 “Flaming Rock”

WHM/Badge UI
- WHM banner: clickable badge linking to Firewall UI (cpsess-aware)
- Remove initial gray flash on login; defer render until status JSON loads
- Add 5px status-colored glow around badge and balanced spacing
- Minor WHM UI hardening and installer improvements

Status JSON/API
- Hardened the lightweight status endpoint used by WHM badge (resilient to transient service states and timeouts).
- Added conservative caching headers and clearer error signaling.

Date: 2025-09-20
Version: 0.1.5 “Snow White”

Installer and Service Sequencing
- Added an install guard flag at /var/lib/qhtlfirewall/.installing to prevent qhtlwaterfall from starting during installation.
- Updated systemd unit qhtlwaterfall.service to include ConditionPathExists=!/var/lib/qhtlfirewall/.installing so the daemon won’t launch while the guard exists.
- The installer now stops qhtlwaterfall at the beginning of install and restarts services at the end in the correct order.

DirWatch (LF_DIRWATCH) Stability During Install
- During install, if an existing configuration is detected, LF_DIRWATCH and LF_DIRWATCH_FILE are temporarily set to 0 to avoid false-positive alerts from temporary files and directories.
- Original LF_DIRWATCH settings are restored automatically after installation completes.

cPanel/WHM UI
- Hardened WHM CGI (cpanel/qhtlfirewall.cgi) template rendering: capture template output and safely print it (handles SCALAR/ARRAY refs), preventing undefined symbol and SCALAR(...) output issues.
- Confirmed compatibility with Cpanel::Template and ensured template discovery works as expected.

General
- Improved restart ordering and installer messaging for clarity.

Date: 2025-09-20
Version: 0.1.4

Packaging & Scripts
- Introduced helper script to build distributable TGZ from repo sources.
- Cleaned packaging excludes and normalized staging paths.

General

Version: 0.1.24
Release Date: 2025-10-04
Changes:
- Implemented client-side fragment extraction in submitAction() choosing .qhtl-inline-fragment > body > raw
- Wrapped conf/allow/redirect/profiles outputs with .qhtl-inline-fragment when ajax=1
- Replaced legacy spacer gradients/stripes with pure idle_fallback.gif placeholder (forced !important override)
- Added css refinements (faded state opacity .55, removed overlay pseudo-element)
- This should stop full WHM page being injected into spacer and show the new placeholder correctly

Version: 0.1.25
Release Date: 2025-10-04
Changes:
- Reverted dark spacer panel + text; restored transparent spacer showing only idle_fallback.gif loader
- Added resilient fallback inline click bindings if external per-button JS files fail to load
- Cache-bust parameter updated to 0.1.25 for per-button modules
- Version bump to force installer pickup of UI modularization + spacer adjustments
- Integration merges; minor fixes and code cleanup.

Version: 0.1.26
Release Date: 2025-10-04
Changes:
- Inline AJAX improvements: submitAction() now trims Rules output to first <pre> and strips outer WHM chrome more aggressively (scripts/forms/doctype/body wrappers removed client-side)
- Added inline handling for Flush (denyf) so it no longer navigates away; shows compact success fragment inline and fades
- Extended fade delay to ~12s to keep results visible longer before opacity transition
- Spacer container made effectively invisible (no dark panel, no text); only the idle_fallback.gif is briefly visible while loading
- Added denyf to inlineActs list and broadened fragment parsing fallback order (.qhtl-inline-fragment > body > raw)
- Strengthened fallback per-button bindings (conf/profiles/allow/status/redirect/flush) to guarantee functionality if external JS modules fail
- Cache-bust query references updated internally to v=0.1.26 (per-button JS modules)
- Prep for future server-side minimalization of status/redirect responses; current pass relies on client filtering logic
- Version bump to distribute these UI reliability/UX refinements

Version: 0.1.27
Release Date: 2025-10-04
Changes:
- Spacer min-height standardized to 220px across tabs
- Fade system reworked: 20s full, dim then hide at 30s; interaction resets timers (no stuck half-dim)
- Inline enable/disable support (status button output now inline)
- Removed external per-button JS modules causing MIME nosniff blocks; unified inline binding
- Robust fragment parsing (remove script/form/noscript early; fallback: .qhtl-inline-fragment > pre > first block element > body) eliminating stray JS snippet leakage
- Inline success/notice messages for enable/disable/flush
- Loader artwork repositioned for taller spacer baseline
- Prevents residual timers on rapid actions (clears old fade timers before scheduling new)
- Structural groundwork for possible server-side minimal fragments next pass
- Version bump to deliver UI stability & UX polish

Version: 0.1.28
Release Date: 2025-10-04
Changes:
- Fix: Config / Profiles / Rules spacer outputs were blank because fragment parser stripped <form> elements
- Parser now preserves forms (still removes script & noscript) so editors and lists render inline
- Version bump to propagate inline editing visibility fix

Version: 0.1.29
Release Date: 2025-10-04
Changes:
- Removed inline enable/disable toggle to avoid accidental single-click disables; preserves hold-to-disable intent
- Added inline restart acknowledgement (restart action)
- Expanded fragment parser: if only forms present (config/profiles), they are retained so editor renders
- Status button short click: if Off -> inline fetch (shows UI), otherwise no immediate action (prevents unintended disable)
- Version bump for safer status interaction and restored config/rules rendering

Version: 0.1.30
Release Date: 2025-10-04
Changes:
- Fixed idle_fallback.gif not loading (heredoc changed to interpolated so $script expands in CSS URL)
- Status button always loads Rules inline (no silent no-op, no accidental state change)
- Added fallback messages for status/config/profiles when output empty
- Strengthened fragment fallback to retain forms/rules output
- Version bump for distribution

Version: 0.1.31
Release Date: 2025-10-04
Changes:
- Status Off button now triggers enable inline (AJAX) instead of navigating
- Added success message + automatic status refresh after enable
- Loader GIF path corrected to fallback_asset endpoint with cache version token
- Added 'enable' to inlineActs so starting firewall stays on page
- Version bump for distribution

Version: 0.1.32
Release Date: 2025-10-04
Changes:
- Added console.debug of raw AJAX responses (first 400 chars) for troubleshooting
- Use raw response text if fragment parsing yields empty
- Status (rules) action: if no <pre> block present, fallback to full body to avoid blank output
- Version bump for diagnostic build

Date: 2025-09-19
Version: 0.1.2

Installers
- Finalized qhtlfirewallget migration and updated references.
- Reduced noise with quieter flags and conditional checks; no-op when system services are unavailable.

General
- Updated UI references and docs for the new package naming.

Date: 2025-09-19
Version: 0.1.1

Installers
- Reduce noisy output.
- Guard systemctl for unit enable/firewalld across installers.
 - Minor fixes to uninstaller scripts and detection logic.

Date: 2025-09-19
Version: 0.1.0

Packaging
- Initial packaging baseline; excluded upstream helper scripts from release archives.
- Established initial release notes and rebrand metadata.

Date: 2025-09-20
Version: 0.0.2 (maintenance update)

Installer and Service Sequencing
- Added an install guard flag at /var/lib/qhtlfirewall/.installing to prevent qhtlwaterfall from starting during installation.
- Updated systemd unit qhtlwaterfall.service to include ConditionPathExists=!/var/lib/qhtlfirewall/.installing so the daemon won’t launch while the guard exists.
- The installer now stops qhtlwaterfall at the beginning of install and restarts services at the end in the correct order.

DirWatch (LF_DIRWATCH) Stability During Install
- During install, if an existing configuration is detected, LF_DIRWATCH and LF_DIRWATCH_FILE are temporarily set to 0 to avoid false-positive alerts from temporary files and directories.
- Original LF_DIRWATCH settings are restored automatically after installation completes.

cPanel/WHM UI
- Hardened WHM CGI (cpanel/qhtlfirewall.cgi) template rendering: capture template output and safely print it (handles SCALAR/ARRAY refs), preventing undefined symbol and SCALAR(...) output issues.
- Confirmed compatibility with Cpanel::Template and ensured template discovery works as expected.

General
- Improved restart ordering and installer messaging for clarity.

Notes
- Note: A tag “v2.0” was published in error around this timeframe; these changes correspond to version 0.0.2.
- Consider adding environment-specific patterns to qhtlfirewall.fignore to keep DirWatch quiet for benign /tmp activity.

